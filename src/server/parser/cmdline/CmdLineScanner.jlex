//
// CmdLineScanner.jlex
//
// Copyright (C) 2002 topIT Informationstechnologie GmbH
//

package de.independit.scheduler.server.parser.cmdline;

import java.io.*;
import de.independit.scheduler.server.util.*;
import de.independit.scheduler.server.exception.*;

%%

%public
%class CmdLineScanner
%implements de.independit.scheduler.server.parser.cmdline.CmdLineParser.yyInput
%yyeof
%integer

%line
%full

%{
private static boolean debug = false;

public int yyline()
{
	return yyline + 1;
}

private int token;
private Object value;
private boolean eofProhibited = false;

/** move to next token
    @return false if positioned beyond tokens (EOF)
    @throws IOException on input error
*/
public boolean advance() throws 
	java.io.IOException, CommonErrorException
{
	token = yylex();
	if(debug) SDMSThread.doTrace(null, "Token : " + token + "\n", SDMSThread.SEVERITY_DEBUG);
	if(token == YYEOF && eofProhibited)
		throw new CommonErrorException("Unexpected end of string (missing quote?)");
	return (token != YYEOF);
}

private void proto(String s)
{
	if(debug) SDMSThread.doTrace(null, s + "( " + yytext() + " )", SDMSThread.SEVERITY_DEBUG);
}

/** classifies current token
    should not be called if advance() returned false
    @return current %token or single character
*/
public int token()
{
	return token;
}

/** associated with current token
    should not be called after advance() returned false.
    @return value for token();
*/
public Object value() 
{
	return value;
}
%}

// Note: This definition of identifiers conforms to the definition in Parser.jay/Scanner.jlex
alpha	=	[a-zA-Z_#@]
alnum	=	[a-zA-Z_0-9#@]
ws	=	[ \t\n\r\b\015]+
identifier =	{alpha}{alnum}*
eidentifier =   [-!#%&(-,/-9;-Z_a-z|]([- !#%&(-,/-9;-Z_a-z|]*[-!#%&(-,/-9;-Z_a-z|])?

%state	DQSTRING SQSTRING BTSTRING VARIABLE DQVARIABLE BTVARIABLE
%%

//------------------------------------------------------------------------------------------
// Normal Environment, Variables are evaluated, Whitespace is discarded
//

<YYINITIAL>{ws}			{ proto("WS ");			return CmdLineParser.SEPARATOR; }
<YYINITIAL>\'			{				yybegin(SQSTRING); value = new String(""); eofProhibited = true; break; }
<YYINITIAL>`			{ proto("BTSTRING_START");	yybegin(BTSTRING); value = new String("`"); eofProhibited = true; return CmdLineParser.DQSTRING_START; }
<YYINITIAL>\\`			{ proto("BACKTICK ");		value = new String("`"); return CmdLineParser.CHAR; }
<YYINITIAL>\"			{ proto("DQSTRING_START ");	yybegin(DQSTRING); value = new String(""); return CmdLineParser.DQSTRING_START; }
<YYINITIAL>\\			{ proto("\\");			value = new String(yytext()); return CmdLineParser.CHAR; }
<YYINITIAL>\\\\			{ proto("\\\\");		value = new String("\\"); return CmdLineParser.CHAR; }
<YYINITIAL>\\\'			{ proto("SINGLE QUOTE ");	value = new String("\\'"); return CmdLineParser.CHAR; }
<YYINITIAL>\\\"			{ proto("DOUBLE QUOTE ");	value = new String("\""); return CmdLineParser.CHAR; }
<YYINITIAL>\\\$			{ proto("DOLLAR ");		value = new String("$"); return CmdLineParser.CHAR; }
<YYINITIAL>\${identifier}	{ 
					proto("PARAM ");
					value = (yytext().substring(1)).toUpperCase(); 
					return CmdLineParser.PARAM;
				}
<YYINITIAL>\$\{			{ proto("PARAMSTART ");		yybegin(VARIABLE); return CmdLineParser.PARAMSTART; }
<YYINITIAL>.			{ proto("CHAR ");		value = new String(yytext()); return CmdLineParser.CHAR; }


//------------------------------------------------------------------------------------------
// Single Quoted string, no variable evaluation
//

<SQSTRING>\'			{ proto("SQSTRING ");		yybegin(YYINITIAL); eofProhibited = false; return CmdLineParser.SQSTRING; }
<SQSTRING>[^\'\\]+		{				value = ((String) value) + new String(yytext()); break; }
<SQSTRING>\\			{				value = ((String) value) + new String(yytext()); break; }
<SQSTRING>\\\\			{				value = ((String) value) + "\\"; break; }
<SQSTRING>\\\'			{				value = ((String) value) + "'"; break; }


//------------------------------------------------------------------------------------------
// Backticked string, variable are evaluated
//

<BTSTRING>`			{ proto("BTSTRING_END ");	value = new String("`"); 
								yybegin(YYINITIAL); 
								eofProhibited = false; 
								return CmdLineParser.DQSTRING_END; 
				}
<BTSTRING>\$\{			{ proto("PARAMSTART ");		yybegin(BTVARIABLE); return CmdLineParser.PARAMSTART; }
<BTSTRING>\\\$			{ proto("DOLLAR ");		value = new String("$"); return CmdLineParser.CHAR; }
<BTSTRING>\${identifier}	{ 
					proto("PARAM ");
					value = (yytext().substring(1)).toUpperCase(); 
					return CmdLineParser.PARAM; 
				}
<BTSTRING>\\`			{				value = new String("`"); return CmdLineParser.CHAR; }
<BTSTRING>\\\\			{				value = new String("\\"); return CmdLineParser.CHAR; }
<BTSTRING>.			{ proto("CHAR ");		value = new String(yytext()); return CmdLineParser.CHAR; }
<BTSTRING>{ws}			{ proto("CHAR ");		value = new String(yytext()); return CmdLineParser.CHAR; }


//------------------------------------------------------------------------------------------
// Double Quoted String, Variables are evaluated, Whitespace matters
//

<DQSTRING>\"			{ proto("DQSTRING_END ");	value = new String(""); yybegin(YYINITIAL); return CmdLineParser.DQSTRING_END; }
<DQSTRING>\$\{			{ proto("PARAMSTART ");		yybegin(DQVARIABLE); return CmdLineParser.PARAMSTART; }
<DQSTRING>\\\$			{ proto("DOLLAR ");		value = new String("$"); return CmdLineParser.CHAR; }
<DQSTRING>\${identifier}	{ 
					proto("PARAM ");
					value = (yytext().substring(1)).toUpperCase(); 
					return CmdLineParser.PARAM; 
				}
<DQSTRING>\\\"			{ proto("CHAR(\") ");		value = new String("\""); return CmdLineParser.CHAR; }
<DQSTRING>\\\\			{ proto("CHAR(\\) ");		value = new String("\\"); return CmdLineParser.CHAR; }
<DQSTRING>.			{ proto("CHAR ");		value = new String(yytext()); return CmdLineParser.CHAR; }
<DQSTRING>{ws}			{ proto("CHAR ");		value = new String(yytext()); return CmdLineParser.CHAR; }


//------------------------------------------------------------------------------------------
// Variable Environment, started from YYINITIAL state
// Identifiers may be quoted, to make them case sensitiv

<VARIABLE>\}			{ proto("PARAMEND ");		yybegin(YYINITIAL); return CmdLineParser.PARAMEND; }
<VARIABLE>{eidentifier}		{ proto("SQSTRING ");		value = yytext().toUpperCase(); return CmdLineParser.SQSTRING; }
<VARIABLE>\'{eidentifier}\'	{ proto("SQSTRING ");		value = (yytext().substring(1, yytext().length() - 1));
				  return CmdLineParser.SQSTRING;
				}
<VARIABLE>\.			{ proto("DOT ");		return CmdLineParser.DOT; }
<VARIABLE>.			{ proto("CHAR ");		value = new String(yytext()); return CmdLineParser.CHAR; }

//------------------------------------------------------------------------------------------
// Variable Environment, started from DQSTRING state
// Identifiers may be quoted, to make them case sensitive

<DQVARIABLE>\}			{ proto("PARAMEND ");		yybegin(DQSTRING); return CmdLineParser.PARAMEND; }
<DQVARIABLE>{eidentifier}	{ proto("SQSTRING ");		value = yytext().toUpperCase(); return CmdLineParser.SQSTRING; }
<DQVARIABLE>\'{eidentifier}\'	{ proto("SQSTRING ");		value = (yytext().substring(1, yytext().length() - 1));
				  return CmdLineParser.SQSTRING;
				}
<DQVARIABLE>\.			{ proto("DOT ");		return CmdLineParser.DOT; }
<DQVARIABLE>.			{ proto("CHAR ");		value = new String(yytext()); return CmdLineParser.CHAR; }

//------------------------------------------------------------------------------------------
// Variable Environment, started from BTSTRING state
// Identifiers may be quoted, to make them case sensitive

<BTVARIABLE>\}			{ proto("PARAMEND ");		yybegin(BTSTRING); return CmdLineParser.PARAMEND; }
<BTVARIABLE>{eidentifier}	{ proto("SQSTRING ");		value = yytext().toUpperCase(); return CmdLineParser.SQSTRING; }
<BTVARIABLE>\'{eidentifier}\'	{ proto("SQSTRING ");		value = (yytext().substring(1, yytext().length() - 1));
				  return CmdLineParser.SQSTRING;
				}
<BTVARIABLE>\.			{ proto("DOT ");		return CmdLineParser.DOT; }
<BTVARIABLE>.			{ proto("CHAR ");		value = new String(yytext()); return CmdLineParser.CHAR; }

//------------------------------------------------------------------------------------------

//
// End of File
//
