echo "executing pre zope -- %version-%release"
if [ "$1" == "1" ]; then
	# we set the umask such that the allowed access is user-only (if not overridden)
	# nobody needs to read the zope directories at filesystem level, except for zope itself
	umask 077
	echo "fetching zope"
	su schedulix -c "mkdir -p /opt/schedulix/software"
	cd /opt/schedulix/software
	su schedulix -c "virtualenv --no-site-packages Zope"
	if [ $? != 0 ]; then
		echo "Error creating python virtualenv environment"
		exit 1
	fi
	cd /opt/schedulix/software/Zope
	retryctr=1
	maxretry=10
	while true; do
		su schedulix -c "
		bin/pip install --upgrade pip
		bin/pip install zc.recipe.egg==2.0.5 --no-binary=zc.recipe.egg
		bin/pip install -r /opt/schedulix/schedulix/etc/zope_requirements-%{zope2version}.txt"
		ret=$?
		if [ $ret != 0 ]; then
			echo "Error during easy_install of Zope2 version %{zope2version}"
			if [ $retryctr -gt $maxretry ]; then
				exit 1
			fi
			echo "retrying ...($retryctr/$maxretry)"
			retryctr=`expr $retryctr + 1`
		else
			break;
		fi
	done

	echo "building zope instance"
	su schedulix -c "bin/mkzopeinstance -d /opt/schedulix/schedulixweb -u sdmsadm:sdmsadm"
	ret=$?
	if [ $ret != 0 ]; then
		echo "Error creating Zope instance for schedulix!web"
		exit 1
	fi
else
	echo "upgrading... software is already there"
	service schedulix-zope stop || true
fi
